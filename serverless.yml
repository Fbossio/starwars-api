# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: fbossio
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: starwars-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: starwars

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    TableName: ${self:service}-missions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-missions

functions:  
  planets:
    handler: handler.getPlanets
    events:
      - httpApi:
          path: /planets
          method: get
  planetById:
    handler: handler.getPlanet
    events:
      - httpApi:
          path: /planets/{id}
          method: get

  people:
    handler: handler.getPeople
    events:
      - httpApi:
          path: /people
          method: get
  personById:
    handler: handler.getPerson
    events:
      - httpApi:
          path: /people/{id}
          method: get

  films:
    handler: handler.getFilms
    events:
      - httpApi:
          path: /films
          method: get
  filmById:
    handler: handler.getFilm
    events:
      - httpApi:
          path: /films/{id}
          method: get

  getMissions:
    handler: handler.listMissions
    events:
      - httpApi:
          path: /missions
          method: get
  createMission:
    handler: handler.createMission
    events:
      - httpApi:
          path: /missions
          method: post

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-missions
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
